{"version":3,"sources":["selectsite.js","map.js","plot.js"],"names":["selectChange","g_id","d3","select","property","selectSite","sitelist","onMarkerClick","e","target","data","called_by","url","window","location","href","split","length","history","pushState","site","filter","d","G_ID","sitemap","panTo","LAT","LON","highlightMarker","setLatLng","setIcon","highlightIcon","addTo","plotSite","updateStatsRow","maxThisYearVal","maxThisYearDay","prettyDate","timeFormat","yearOnlyFormat","maxMeasure","_","maxBy","mostRecent","currYearList","uniqBy","yearCount","maxYear","wy","currWY","calcWaterYear","Date","data_thisyear","maxThisYear","type","oldval","toFixed","val","day","recentContext1","recentContext2","max_currentyearContext1","max_overallContext1","max_overallDate","html","clearStatsRow","dailyData","onpopstate","state","console","log","iconType","icon","greenIcon","purpleIcon","orangeIcon","loadSites","csv","id","error","STATUS","on","selectAll","enter","append","attr","text","SITE_CODE","SITE_NAME","updateMapSites","forEach","isNaN","marker","L","getvars","displayDateFormat","map","setView","layer","StamenTileLayer","addLayer","SiteIcon","Icon","extend","options","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","shadowURL","legend","control","position","onAdd","div","DomUtil","create","filenames","labels","i","innerHTML","SelectYearChange","highlightYear","classed","hoverYear","unHoverYear","dt","year","getFullYear","month","getMonth","remove","svg","updatePlot","filepath","parseDate","concat","data_wy","groupBy","years","keys","wy_options","clone","data_plot","push","exit","points","sortBy","cumCalculated","cumulative","p","x_scales","scaleTime","domain","rangeRound","margin","left","width","y","height","extent","g","call","axisBottom","max","tickFormat","axisLeft","thisYear","line","setSVGSize","document","getElementById","offsetWidth","offsetHeight","right","top","bottom","resize","timeParse","bisectDate","bisector","date","scaleLinear","bgcolor","maincolor","selectcolor","x"],"mappings":"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","file":"all.js","sourcesContent":["\r\n// Load this file first, before map.js and plot.js\r\n\r\n// On load, the progression is to load the globals (this script),\r\n//   then load the site list & map (map.js).  Then the first site\r\n//   is selected, and the plotSite() function creates a graph.\r\n\r\n\r\n/* Functions that control what happens when a site is selected.\r\n\r\n   Three possible ways to select a site:\r\n   - Click a marker\r\n   - Select an option from the selectbox\r\n   - Load the map (eventually use http POST to store selected site)\r\n   \r\n   Once a site is selected, do three things:\r\n   - Pan the map to the site location\r\n   - Update the selectbox option to the correct site\r\n   - Update the graph for the new data\r\n*/\r\n\r\n// Global variables.  I know, I\"m a terrible person.\r\nvar sitelist = {};\r\nvar dailyData = [];\r\n\r\n\r\n// The user selected a different site in the selectbox\r\nfunction selectChange() {\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    selectSite(sitelist, g_id);\r\n}\r\n\r\n// The user clicked on a marker in the Leaflet map\r\nfunction onMarkerClick(e) {\r\n    selectSite(sitelist, e.target.g_id);\r\n}\r\n\r\n// The user pressed the back or forward button\r\nwindow.onpopstate = function(e) {\r\n    \r\n\r\n    if(e.state) {\r\n        \r\n        console.log(e.state);\r\n        \r\n        var url = window.location.href;\r\n        \r\n        if (url.split(\"?\").length > 1) {\r\n            g_id = url.split(\"?\")[1].split(\"=\")[1];\r\n            selectSite(sitelist, g_id, \"popstate\");\r\n        }\r\n    }\r\n}\r\n\r\n// What happens when a user selects a site from the map or the list\r\nfunction selectSite(data, g_id, called_by) {\r\n    \r\n    // Set the site GET variable, and update the browser history\r\n    if (typeof called_by === \"undefined\") {\r\n        url = window.location.href;\r\n        \r\n        if (url.split(\"?\").length > 1) {\r\n            url = url.split(\"?\")[0];\r\n        }\r\n        \r\n        window.history.pushState({\"site\": g_id}, \"TC Water Monitoring\", \"/?site=\" + g_id);\r\n    };\r\n    \r\n    // Collect the site-specific data\r\n    var site = data.filter(function(d) { return (d.G_ID === g_id); })[0];\r\n    d3.select(\"#selected-station\").property(\"value\", g_id);\r\n    \r\n    // Map manipulation\r\n    sitemap.panTo([site.LAT, site.LON]);\r\n    highlightMarker.setLatLng([site.LAT, site.LON]);\r\n    highlightMarker.setIcon(highlightIcon);\r\n    highlightMarker.addTo(sitemap);\r\n    \r\n    // Plot data\r\n    plotSite(g_id);\r\n}\r\n\r\n// Calculate and add statistics to the stats row, using\r\n//   data from the currently selected site\r\nfunction updateStatsRow(data) {\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", false)\r\n    \r\n    // Calculate statistics\r\n    var prettyDate = d3.timeFormat(\"%b %e, %Y\");\r\n    var yearOnlyFormat = d3.timeFormat(\"%Y\");\r\n    \r\n    var site = sitelist.filter(function (d) { return (d.G_ID === data[0].G_ID); })[0];\r\n    \r\n    var maxMeasure = _.maxBy(data, \"val\");\r\n    var mostRecent = _.maxBy(data, \"day\");\r\n    \r\n    var currYearList = _.uniqBy(data, \"wy\");\r\n    var yearCount = currYearList.length;\r\n    var maxYear = _.maxBy(currYearList, \"wy\").wy;\r\n    \r\n    var currWY = calcWaterYear(new Date());\r\n    var data_thisyear = _.filter(data, {\"wy\": currWY});\r\n    \r\n    // If there is no data for the current year, replacement values\r\n    var maxThisYearVal;\r\n    var maxThisYearDay;\r\n    \r\n    if (maxYear === currWY) {\r\n        var maxThisYear = {};\r\n        \r\n        if (site.type === \"Rain\") {\r\n            maxThisYear = _.maxBy(data_thisyear, \"oldval\");\r\n            maxThisYearVal = maxThisYear.oldval.toFixed(2);\r\n        } else {\r\n            var maxThisYear = _.maxBy(data_thisyear, \"val\");\r\n            maxThisYearVal = maxThisYear.val.toFixed(2);\r\n        }\r\n        \r\n        maxThisYearDay = prettyDate(maxThisYear.day);\r\n        \r\n    } else {\r\n        maxThisYearVal = \"No Data\";\r\n        maxThisYearDay = \"--\";\r\n        \r\n    }\r\n    \r\n    //console.log(maxThisYearVal);\r\n    //console.log(maxThisYearDay);\r\n    \r\n    // Tailor the context of the stats to the type of station we\"re looking at\r\n    var recentContext1 = \"Most Recent\";\r\n    var recentContext2 = \"\";\r\n    \r\n    var max_currentyearContext1 = \"Max This Year\";\r\n    \r\n    var max_overallContext1 = \"Highest Recorded\";\r\n    var max_overallDate = prettyDate(maxMeasure.day)\r\n    \r\n    if (site.type == \"Rain\") {\r\n        recentContext1 = \"Inches This Year\";\r\n        recentContext2 = \"As Of \";\r\n        \r\n        max_currentyearContext1 = \"Wettest Day This Year\";\r\n        \r\n        max_overallContext1 = \"Wettest Year\";\r\n        max_overallDate = yearOnlyFormat(maxMeasure.day);\r\n    }\r\n    \r\n    // Using the calculated stats & context, update the text\r\n    d3.select(\".quick-stats.recent\").html(\"<small>\" + recentContext1 + \"</small><br />\" +\r\n        mostRecent.val.toFixed(2) +\r\n        \" <br /><small>\" + recentContext2 + prettyDate(mostRecent.day) + \"</small>\");\r\n    \r\n    d3.select(\".quick-stats.count\").html(\"<small>Years Measured</small><br />\" +\r\n        yearCount);\r\n    \r\n    d3.select(\".quick-stats.max-currentyear\").html(\"<small>\" + max_currentyearContext1 + \"</small><br />\" +\r\n        maxThisYearVal +\r\n        \"<br /><small>\" + maxThisYearDay + \"</small>\");\r\n        \r\n    d3.select(\".quick-stats.max-overall\").html(\"<small>\" + max_overallContext1 + \"</small><br />\" +\r\n        maxMeasure.val.toFixed(2) +\r\n        \"<br /><small>\" + max_overallDate + \"</small>\");\r\n\r\n}\r\n\r\n// Remove data from the stats row, and display a \"Loading\" alert\r\nfunction clearStatsRow() {\r\n    d3.select(\".quick-stats.recent\").html(\"<small>--</small><br />Loading...<br /><small>--</small>\");\r\n    d3.select(\".quick-stats.count\").html(\"\");\r\n    d3.select(\".quick-stats.max-currentyear\").html(\"\");\r\n    d3.select(\".quick-stats.max-overall\").html(\"\");\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", true)\r\n}\r\n\r\n","\r\n// Build the map from the list of sites.\r\n// Include this after selectsite.js and before plot.js\r\n\r\nvar displayDateFormat = d3.timeFormat(\"%Y-%m-%d\");\r\n\r\nvar sitemap = L.map(\"mapid\").setView([47.04, -122.9], 10);\r\n\r\n// For now, we\"ll use OSM.  In the future it might behoove us to make our own\r\n//  tile layer, maybe using NAIP, hillshade, streets, NHD?\r\n\r\nvar layer = new L.StamenTileLayer(\"toner\");\r\nsitemap.addLayer(layer);\r\n\r\n\r\n//L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//    attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n//    maxZoom: 18,\r\n//}).addTo(sitemap);\r\n\r\n// Custom icons to differentiate between well, rain, and discharge monitoring.\r\nvar SiteIcon = L.Icon.extend({\r\n    options: {\r\n        iconSize:     [15, 15],\r\n        shadowSize:   [15, 15],\r\n        iconAnchor:   [7.5, 7.5],\r\n        shadowAnchor: [5, 5],\r\n        popupAnchor:  [15, 15]\r\n    }\r\n});\r\n\r\nvar greenIcon = new SiteIcon({iconUrl: \"./img/marker/green_circle.png\",\r\n                              shadowURL: \"./img/marker/shadow_circle.png\"}),\r\n    purpleIcon = new SiteIcon({iconUrl: \"./img/marker/purple_triangle.png\",\r\n                              shadowURL: \"./img/marker/shadow_triangle.png\"}),\r\n    orangeIcon = new SiteIcon({iconUrl: \"./img/marker/orange_square.png\",\r\n                              shadowURL: \"./img/marker/shadow_square.png\"});\r\n\r\n// The highlight icon will be different - slightly smaller\r\nvar highlightIcon = L.icon({\r\n    iconUrl: \"./img/marker/highlight_circle.png\",\r\n    \r\n    iconSize:       [10, 10],\r\n    shadowSize:     [10, 10],\r\n    iconAnchor:     [5, 5],\r\n    shadowAnchor:   [10, 10],\r\n    popupAnchor:    [10, 10]\r\n})\r\n\r\nvar highlightMarker = L.marker({icon: highlightIcon});\r\n\r\nfunction iconType(type) {\r\n    var icon = {};\r\n    \r\n    if (type == \"Rain\") {\r\n        icon = greenIcon;\r\n    } if (type == \"Well\") {\r\n        icon = purpleIcon;\r\n    } if (type == \"Flow\") {\r\n        icon = orangeIcon;\r\n    };\r\n    \r\n    return icon;\r\n}\r\n\r\n// Make a legend\r\nvar legend = L.control({position: 'bottomright'});\r\n\r\nlegend.onAdd = function (sitemap) {\r\n    var div = L.DomUtil.create(\"div\", \"info legend\"),\r\n        filenames = [\"green_circle.png\", \"purple_triangle.png\", \"orange_square.png\"],\r\n        labels = [\"Rain\", \"Well\", \"Flow\"];\r\n\r\n    for (var i=0; i<filenames.length; i++) {\r\n        div.innerHTML += '<img src=\"./img/marker/' + filenames[i] + '\"></img>' +\r\n        '  ' + labels[i] + '<br />';\r\n    }\r\n    \r\n    return div;\r\n};\r\n\r\nlegend.addTo(sitemap)\r\n\r\n// Load the data from the CSV file into memory\r\nfunction loadSites() {\r\n    \r\n    d3.csv(\"./data/station_list.csv\", function(d) {\r\n      d.id = +d.G_ID;\r\n      d.LAT = +d.LAT;\r\n      d.LON = +d.LON;\r\n      \r\n      return d;\r\n    }, function(error, data) {\r\n      //if (error) throw error;\r\n      \r\n      data = data.filter(function(d) {return d.STATUS == \"Active\"})\r\n      \r\n      // Create the list of sites in the selectbox\r\n      var select = d3.select(\"#selected-station\")\r\n          .on(\"change\", selectChange)\r\n        .selectAll(\"option\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"option\")\r\n          .attr(\"value\", function(d) { return d.G_ID})\r\n          .text(function(d) {return d.SITE_CODE + \": \" + d.SITE_NAME + \" (\" + d.type + \")\"});\r\n      \r\n      sitelist = data;\r\n      \r\n      updateMapSites(data);\r\n      \r\n    });\r\n};\r\n\r\n// Add the monitoring sites to the leaflet map\r\nfunction updateMapSites(data) {\r\n    \r\n    data.forEach(function(d) {\r\n        if (!(isNaN(d.LAT) || isNaN(d.LON)) & d.STATUS == \"Active\"){\r\n            \r\n            var marker = L.marker([d.LAT, d.LON], {icon: iconType(d.type)});\r\n            marker.g_id = d.G_ID;\r\n            marker.on(\"click\", onMarkerClick);\r\n            \r\n            marker.addTo(sitemap);\r\n        };\r\n    });\r\n    \r\n    // Load up data when we launch the page\r\n    var getvars = window.location.href.split(\"?\")[1];\r\n    var g_id = typeof getvars === \"undefined\" ? sitelist[0].G_ID : getvars.split(\"=\")[1];\r\n    //var g_id = sitelist[0].G_ID;\r\n    console.log(g_id);\r\n    \r\n    selectSite(sitelist, g_id);\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Functions for plotting data\r\n//   Include this AFTER load.js\r\n\r\n// D3 line chart constants\r\n//  See https://bl.ocks.org/mbostock/3883245\r\n\r\n// Multiple x-scales used to plot all water years on the same axis\r\n//   See http://stackoverflow.com/questions/42870187/d3-multi-series-chart-time-year-interval-x-axis-overlaying-multiple-years-of/42870609\r\n\r\nvar parseDate = d3.timeParse(\"%Y-%m-%d %H:%M:%S\");\r\n\r\nvar svg = d3.select(\"svg\")\r\n    .attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n    .attr(\"height\", document.getElementById(\"mapid\").offsetHeight),\r\n    margin = {top: 20, right: 10, bottom: 30, left: 50},\r\n    width = +svg.attr(\"width\") - margin.left - margin.right,\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\r\n    bisectDate = d3.bisector(function(d) { return d.date; }).left;\r\n\r\nvar g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n//var x = d3.scaleTime();\r\nvar x_scales = {};\r\nvar y = d3.scaleLinear();\r\n\r\nvar thisYear;\r\nvar years = [];\r\n\r\n// Color the most recent year differently from the other years.\r\n//   May replace this with a function that allows users to select\r\n//   a water year to highlight.\r\n\r\nbgcolor = \"#d9d9d9\";\r\nmaincolor = \"#525252\";\r\nselectcolor = \"red\";\r\n\r\n// Function for building the SVG line from the data\r\nvar line = d3.line()\r\n    .x(function(d) { return x_scales[thisYear](d.day); })\r\n    .y(function(d) { return y(d.val); });\r\n\r\n\r\n// Fires when the year selectbox changes value.\r\nfunction SelectYearChange() {\r\n    wy = d3.select(\"#selected-wy\").property(\"value\");\r\n    highlightYear(wy);\r\n}\r\n\r\n// Highlight the currently selected water year\r\nfunction highlightYear(wy) {\r\n    d3.selectAll(\"svg path.valueLine\").classed(\"highlight\", false);\r\n    if (wy != \"Clear\") {\r\n        d3.select(\"svg path.wy\" + wy).classed(\"highlight\", true);\r\n        d3.select(\"#selected-wy\").property(\"value\", wy);\r\n    }\r\n};\r\n\r\n// Show the exact date and value on mouseover\r\nfunction hoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(wy);\r\n    \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", true);\r\n}\r\n\r\n// Return to normal when leaving hover (mouseout)\r\nfunction unHoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(\"\");\r\n        \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", false);\r\n}\r\n\r\n// Helper function that takes a date object and calculates the water year\r\nfunction calcWaterYear(dt) {\r\n    var year = dt.getFullYear();\r\n    var month = dt.getMonth();\r\n    \r\n    var wy = year;\r\n    \r\n    // Months are zero-indexed in js, so this is greater than\r\n    //  or equal to October\r\n    if (month >= 9) {\r\n        wy = year + 1;\r\n    };\r\n    \r\n    return(wy);\r\n}\r\n\r\n// Load the daily data\r\nfunction plotSite(g_id) {\r\n    // If the data have not yet been loaded, pull them in via d3.csv, then\r\n    //   write them to dailyData and update everything.\r\n    \r\n    d3.selectAll(\"g.x-axis\").remove();\r\n    d3.selectAll(\"g.y-axis\").remove();\r\n    svg.selectAll(\"path.valueLine\").remove();\r\n    \r\n    clearStatsRow();\r\n    \r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    \r\n    if (data.length > 0) {\r\n        updatePlot(g_id);\r\n        updateStatsRow(data);\r\n    } else {\r\n        \r\n        var filepath = \"./data/g_id-\" + g_id + \".csv\"\r\n        //console.log(\"Loading \" + filepath);\r\n        \r\n        d3.csv(filepath, function(d) {\r\n          d.val =  d.val.length > 0 ? +d.val : \"-\";\r\n          d.day = parseDate(d.day);\r\n          d.wy = calcWaterYear(d.day);\r\n          \r\n          return d;\r\n        }, function(error, data) {\r\n            //console.log(\"Data file parsed.\");\r\n            dailyData = dailyData.concat(data);\r\n            //dailyData = data;\r\n            updatePlot(g_id);\r\n            updateStatsRow(data);\r\n        });\r\n    };\r\n};\r\n\r\n// Plot the daily data\r\nfunction updatePlot(g_id) {\r\n    \r\n    \r\n    // Only show data for the site we\"ve selected.\r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    var data_wy = _.groupBy(data, \"wy\");\r\n    \r\n    years = _.keys(data_wy);\r\n    var wy_options = _.clone(years);\r\n    var data_plot = [];\r\n    \r\n    // Update the water year select box; standard D3 update/enter/exit pattern\r\n    wy_options.push(\"Clear\");\r\n    var options = d3.select(\"#selected-wy\")\r\n        .on('change', SelectYearChange)\r\n      .selectAll(\"option\")\r\n        .data(wy_options, function(d) {return d;});\r\n      \r\n    options.enter().append(\"option\")\r\n        .attr(\"value\", function(d) { return d})\r\n        .text(function(d) {return d});\r\n        \r\n    options.exit().remove();\r\n    \r\n    // Set the water year selection back to \"Clear\" every time.\r\n    d3.select(\"#selected-wy\").property(\"value\", \"Clear\");\r\n    \r\n    // Get some info about the site we\"re working with\r\n    var site = sitelist.filter(function(d) {return d.G_ID == g_id})[0];\r\n    var type = site.type;\r\n    \r\n    // Different data sets for each water year; also sort by day.\r\n    years.forEach(function(d, i) {\r\n        data_plot.push({\r\n            year: d,\r\n            points: _.sortBy(data_wy[d], [\"day\"])\r\n        });\r\n    });\r\n    \r\n    // Calculate a cumulative total if this is a rain site\r\n    if (type == \"Rain\" & !(site.cumCalculated == \"Y\")) {\r\n        data_plot.forEach(function(d) {\r\n            var cumulative = 0;\r\n            d.points.forEach(function(p) {\r\n                p.oldval = p.val;\r\n                p.val = cumulative + p.oldval;\r\n                cumulative = p.val;\r\n            });\r\n        });\r\n        site.cumCalculated = \"Y\";\r\n    };\r\n    \r\n    // Create separate x scales for each water year.  They need to have the\r\n    //   same range, but the domain will be different; that allows different\r\n    //   dates to map to the same x coordinate, which is what we want.\r\n    years.forEach(function(d) {\r\n        x_scales[\"scale\" + d] = d3.scaleTime()\r\n          .domain([new Date(d-1, 10, 1), new Date(d, 9, 30)])\r\n          .rangeRound([margin.left, width]);\r\n    });\r\n    \r\n    // Set up the y range; important that it be inside the function for resizing\r\n    //   Might be able to just include rangeRound in the resize function...\r\n    y.rangeRound([height, 0]);\r\n    y.domain(d3.extent(data, function(d) { return d.val; }));\r\n    \r\n    // Add the x-axis to the plot.  Use a class to identify it later.\r\n    g.append(\"g\")\r\n        .attr(\"class\", \"x-axis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x_scales[\"scale\" + _.max(years)])\r\n          .tickFormat(d3.timeFormat(\"%b\")))\r\n      .select(\".domain\")\r\n        .remove();\r\n    \r\n    \r\n    // Add the y-axis to the graph.  Includes some labeling text.\r\n    g.append(\"g\")\r\n        .call(d3.axisLeft(y))\r\n        .attr(\"class\", \"y-axis\")\r\n      .append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(type == \"Rain\" ? \"Rainfall (inches)\" : \"Water Level (feet)\");\r\n    \r\n    // Add multiple lines to the graph; one for each water year\r\n    g.selectAll(\".valueLine\")\r\n      .data(data_plot)\r\n      .enter()\r\n      .append(\"path\")\r\n        .attr(\"class\", function(d,i) {return \"valueLine wy\" + d.year})\r\n        .classed(\"currentwy\", function(d) {return (new Date()).getFullYear() == +d.year})\r\n        .attr(\"d\", function(d) {\r\n            thisYear = \"scale\" + d.year;\r\n            return line(d.points)})\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"fill\", \"none\")\r\n        .on(\"mouseover\", function(d) { hoverYear(d.year)})\r\n        .on(\"mouseout\", function(d) {unHoverYear(d.year)})\r\n        .on(\"click\", function(d) { highlightYear(d.year)});\r\n    \r\n    // Label years on mouseover\r\n    d3.select(\"g.x-axis\")\r\n      .append(\"text\")\r\n        .attr(\"class\", \"hoverText\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"y\", - 20)\r\n        .attr(\"x\", width - 20)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\");\r\n}\r\n\r\n// Keep the graph the same size as the map\r\nfunction setSVGSize() {\r\n    svg.attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n        .attr(\"height\", document.getElementById(\"mapid\").offsetHeight)\r\n    \r\n    width = +svg.attr(\"width\") - margin.left - margin.right;\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n}\r\n\r\nfunction resize() {\r\n    setSVGSize();\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    plotSite(g_id);\r\n}\r\n\r\nd3.select(window).on(\"resize\", resize);\r\n\r\nloadSites();\r\n\r\n\r\n"]}