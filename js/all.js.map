{"version":3,"sources":["selectsite.js","map.js","plot.js"],"names":["selectChange","g_id","d3","select","property","selectSite","sitelist","onMarkerClick","e","target","data","site","filter","d","G_ID","sitemap","panTo","LAT","LON","highlightMarker","setLatLng","setIcon","highlightIcon","addTo","plotSite","updateStatsRow","maxThisYearVal","maxThisYearDay","prettyDate","timeFormat","yearOnlyFormat","maxMeasure","_","maxBy","mostRecent","currYearList","uniqBy","yearCount","length","maxYear","wy","currWY","calcWaterYear","Date","data_thisyear","maxThisYear","type","oldval","toFixed","val","day","recentContext1","recentContext2","max_currentyearContext1","max_overallContext1","max_overallDate","html","clearStatsRow","iconType","icon","greenIcon","purpleIcon","orangeIcon","loadSites","csv","id","error","STATUS","on","selectAll","enter","append","attr","text","SITE_CODE","SITE_NAME","updateMapSites","forEach","isNaN","marker","L","SelectYearChange","highlightYear","classed","dt","year","getFullYear","month","getMonth","remove","svg","dailyData","updatePlot","filepath","parseDate","concat","data_wy","groupBy","years","keys","data_plot","options","exit","i","push","points","sortBy","cumCalculated","cumulative","p","x_scales","scaleTime","domain","rangeRound","margin","left","width","y","height","extent","g","call","axisBottom","max","tickFormat","axisLeft","thisYear","line","setSVGSize","document","getElementById","offsetWidth","offsetHeight","right","top","bottom","resize","displayDateFormat","map","setView","layer","StamenTileLayer","addLayer","CircleIcon","Icon","extend","shadowUrl","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","timeParse","bisectDate","bisector","date","scaleLinear","bgcolor","maincolor","selectcolor","x","window"],"mappings":"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","file":"all.js","sourcesContent":["\r\n// Load this file first, before map.js and plot.js\r\n\r\n// On load, the progression is to load the globals (this script),\r\n//   then load the site list & map (map.js).  Then the first site\r\n//   is selected, and the plotSite() function creates a graph.\r\n\r\n\r\n/* Functions that control what happens when a site is selected.\r\n\r\n   Three possible ways to select a site:\r\n   - Click a marker\r\n   - Select an option from the selectbox\r\n   - Load the map (eventually use http POST to store selected site)\r\n   \r\n   Once a site is selected, do three things:\r\n   - Pan the map to the site location\r\n   - Update the selectbox option to the correct site\r\n   - Update the graph for the new data\r\n*/\r\n\r\n// Global variables.  I know, I\"m a terrible person.\r\nvar sitelist = {};\r\nvar dailyData = [];\r\n\r\n// The user selected a different site in the selectbox\r\nfunction selectChange() {\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    selectSite(sitelist, g_id);\r\n}\r\n\r\n// The user clicked on a marker in the Leaflet map\r\nfunction onMarkerClick(e) {\r\n    selectSite(sitelist, e.target.g_id);\r\n}\r\n\r\n// What happens when a user selects a site from the map or the list\r\nfunction selectSite(data, g_id) {\r\n    var site = data.filter(function(d) { return (d.G_ID === g_id); })[0];\r\n    d3.select(\"#selected-station\").property(\"value\", g_id);\r\n    \r\n    // Map manipulation\r\n    sitemap.panTo([site.LAT, site.LON]);\r\n    highlightMarker.setLatLng([site.LAT, site.LON]);\r\n    highlightMarker.setIcon(highlightIcon);\r\n    highlightMarker.addTo(sitemap);\r\n    \r\n    // Plot data\r\n    plotSite(g_id);\r\n    \r\n    // Update the quick-stats bar\r\n    //var currentData = _.filter(dailyData, {G_ID: g_id});\r\n    //updateStatsRow(currentData);\r\n}\r\n\r\n// Calculate and add statistics to the stats row, using\r\n//   data from the currently selected site\r\nfunction updateStatsRow(data) {\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", false)\r\n    \r\n    // Calculate statistics\r\n    var prettyDate = d3.timeFormat(\"%b %e, %Y\");\r\n    var yearOnlyFormat = d3.timeFormat(\"%Y\");\r\n    \r\n    var site = sitelist.filter(function (d) { return (d.G_ID === data[0].G_ID); })[0];\r\n    \r\n    var maxMeasure = _.maxBy(data, \"val\");\r\n    var mostRecent = _.maxBy(data, \"day\");\r\n    \r\n    var currYearList = _.uniqBy(data, \"wy\");\r\n    var yearCount = currYearList.length;\r\n    var maxYear = _.maxBy(currYearList, \"wy\").wy;\r\n    \r\n    var currWY = calcWaterYear(new Date());\r\n    var data_thisyear = _.filter(data, {\"wy\": currWY});\r\n    \r\n    // If there is no data for the current year, replacement values\r\n    var maxThisYearVal;\r\n    var maxThisYearDay;\r\n    \r\n    if (maxYear === currWY) {\r\n        var maxThisYear = {};\r\n        \r\n        if (site.type === \"Rain\") {\r\n            maxThisYear = _.maxBy(data_thisyear, \"oldval\");\r\n            maxThisYearVal = maxThisYear.oldval.toFixed(2);\r\n        } else {\r\n            var maxThisYear = _.maxBy(data_thisyear, \"val\");\r\n            maxThisYearVal = maxThisYear.val.toFixed(2);\r\n        }\r\n        \r\n        maxThisYearDay = prettyDate(maxThisYear.day);\r\n        \r\n    } else {\r\n        maxThisYearVal = \"No Data\";\r\n        maxThisYearDay = \"--\";\r\n        \r\n    }\r\n    \r\n    //console.log(maxThisYearVal);\r\n    //console.log(maxThisYearDay);\r\n    \r\n    // Tailor the context of the stats to the type of station we\"re looking at\r\n    var recentContext1 = \"Most Recent\";\r\n    var recentContext2 = \"\";\r\n    \r\n    var max_currentyearContext1 = \"Max This Year\";\r\n    \r\n    var max_overallContext1 = \"Highest Recorded\";\r\n    var max_overallDate = prettyDate(maxMeasure.day)\r\n    \r\n    if (site.type == \"Rain\") {\r\n        recentContext1 = \"Inches This Year\";\r\n        recentContext2 = \"As Of \";\r\n        \r\n        max_currentyearContext1 = \"Wettest Day This Year\";\r\n        \r\n        max_overallContext1 = \"Wettest Year\";\r\n        max_overallDate = yearOnlyFormat(maxMeasure.day);\r\n    }\r\n    \r\n    // Using the calculated stats & context, update the text\r\n    d3.select(\".quick-stats.recent\").html(\"<small>\" + recentContext1 + \"</small><br />\" +\r\n        mostRecent.val.toFixed(2) +\r\n        \" <br /><small>\" + recentContext2 + prettyDate(mostRecent.day) + \"</small>\");\r\n    \r\n    d3.select(\".quick-stats.count\").html(\"<small>Years Measured</small><br />\" +\r\n        yearCount);\r\n    \r\n    d3.select(\".quick-stats.max-currentyear\").html(\"<small>\" + max_currentyearContext1 + \"</small><br />\" +\r\n        maxThisYearVal +\r\n        \"<br /><small>\" + maxThisYearDay + \"</small>\");\r\n        \r\n    d3.select(\".quick-stats.max-overall\").html(\"<small>\" + max_overallContext1 + \"</small><br />\" +\r\n        maxMeasure.val.toFixed(2) +\r\n        \"<br /><small>\" + max_overallDate + \"</small>\");\r\n\r\n}\r\n\r\n// Remove data from the stats row, and display a \"Loading\" alert\r\nfunction clearStatsRow() {\r\n    d3.select(\".quick-stats.recent\").html(\"<small>--</small><br />Loading...<br /><small>--</small>\");\r\n    d3.select(\".quick-stats.count\").html(\"\");\r\n    d3.select(\".quick-stats.max-currentyear\").html(\"\");\r\n    d3.select(\".quick-stats.max-overall\").html(\"\");\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", true)\r\n}\r\n\r\n","\r\n// Build the map from the list of sites.\r\n// Include this after selectsite.js and before plot.js\r\n\r\nvar displayDateFormat = d3.timeFormat(\"%Y-%m-%d\");\r\n\r\nvar sitemap = L.map(\"mapid\").setView([47.04, -122.9], 10);\r\n\r\n// For now, we\"ll use OSM.  In the future it might behoove us to make our own\r\n//  tile layer, maybe using NAIP, hillshade, streets, NHD?\r\n\r\nvar layer = new L.StamenTileLayer(\"toner\");\r\nsitemap.addLayer(layer);\r\n\r\n\r\n//L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//    attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n//    maxZoom: 18,\r\n//}).addTo(sitemap);\r\n\r\n// Custom icons to differentiate between well, rain, and discharge monitoring.\r\nvar CircleIcon = L.Icon.extend({\r\n    options: {\r\n        shadowUrl: \"./img/marker/shadow_circle.png\",\r\n        iconSize:     [15, 15],\r\n        shadowSize:   [15, 15],\r\n        iconAnchor:   [7.5, 7.5],\r\n        shadowAnchor: [5, 5],\r\n        popupAnchor:  [15, 15]\r\n    }\r\n});\r\n\r\nvar greenIcon = new CircleIcon({iconUrl: \"./img/marker/green_circle.png\"}),\r\n    purpleIcon = new CircleIcon({iconUrl: \"./img/marker/purple_circle.png\"}),\r\n    orangeIcon = new CircleIcon({iconUrl: \"./img/marker/orange_circle.png\"});\r\n\r\n// The highlight icon will be different - slightly larger\r\nvar highlightIcon = L.icon({\r\n    iconUrl: \"./img/marker/highlight_circle.png\",\r\n    \r\n    iconSize:       [10, 10],\r\n    shadowSize:     [10, 10],\r\n    iconAnchor:     [5, 5],\r\n    shadowAnchor:   [10, 10],\r\n    popupAnchor:    [10, 10]\r\n})\r\n\r\nvar highlightMarker = L.marker({icon: highlightIcon});\r\n\r\nfunction iconType(type) {\r\n    var icon = {};\r\n    \r\n    if (type == \"Rain\") {\r\n        icon = greenIcon;\r\n    } if (type == \"Well\") {\r\n        icon = purpleIcon;\r\n    } if (type == \"Flow\") {\r\n        icon = orangeIcon;\r\n    };\r\n    \r\n    return icon;\r\n}\r\n\r\n// Load the data from the CSV file into memory\r\nfunction loadSites() {\r\n    \r\n    d3.csv(\"./data/station_list.csv\", function(d) {\r\n      d.id = +d.G_ID;\r\n      d.LAT = +d.LAT;\r\n      d.LON = +d.LON;\r\n      \r\n      return d;\r\n    }, function(error, data) {\r\n      //if (error) throw error;\r\n      \r\n      data = data.filter(function(d) {return d.STATUS == \"Active\"})\r\n      \r\n      // Create the list of sites in the selectbox\r\n      var select = d3.select(\"#selected-station\")\r\n          .on(\"change\", selectChange)\r\n        .selectAll(\"option\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"option\")\r\n          .attr(\"value\", function(d) { return d.G_ID})\r\n          .text(function(d) {return d.SITE_CODE + \": \" + d.SITE_NAME + \" (\" + d.type + \")\"});\r\n      \r\n      sitelist = data;\r\n      \r\n      updateMapSites(data);\r\n      \r\n    });\r\n};\r\n\r\n// Add the monitoring sites to the leaflet map\r\nfunction updateMapSites(data) {\r\n    \r\n    data.forEach(function(d) {\r\n        if (!(isNaN(d.LAT) || isNaN(d.LON)) & d.STATUS == \"Active\"){\r\n            \r\n            var marker = L.marker([d.LAT, d.LON], {icon: iconType(d.type)});\r\n            marker.g_id = d.G_ID;\r\n            marker.on(\"click\", onMarkerClick);\r\n            \r\n            marker.addTo(sitemap);\r\n        };\r\n    });\r\n    \r\n    // Load up data when we launch the page\r\n    var g_id = sitelist[0].G_ID;\r\n    //console.log(g_id);\r\n    \r\n    plotSite(g_id);\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Functions for plotting data\r\n//   Include this AFTER load.js\r\n\r\n// D3 line chart constants\r\n//  See https://bl.ocks.org/mbostock/3883245\r\n\r\n// Multiple x-scales used to plot all water years on the same axis\r\n//   See http://stackoverflow.com/questions/42870187/d3-multi-series-chart-time-year-interval-x-axis-overlaying-multiple-years-of/42870609\r\n\r\nvar parseDate = d3.timeParse(\"%Y-%m-%d %H:%M:%S\");\r\n\r\nvar svg = d3.select(\"svg\")\r\n    .attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n    .attr(\"height\", document.getElementById(\"mapid\").offsetHeight),\r\n    margin = {top: 20, right: 10, bottom: 30, left: 50},\r\n    width = +svg.attr(\"width\") - margin.left - margin.right,\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\r\n    bisectDate = d3.bisector(function(d) { return d.date; }).left;\r\n\r\nvar g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n//var x = d3.scaleTime();\r\nvar x_scales = {};\r\nvar y = d3.scaleLinear();\r\n\r\nvar thisYear;\r\nvar years = [];\r\n\r\n// Color the most recent year differently from the other years.\r\n//   May replace this with a function that allows users to select\r\n//   a water year to highlight.\r\n\r\nbgcolor = \"#d9d9d9\";\r\nmaincolor = \"#525252\";\r\nselectcolor = \"red\";\r\n\r\n// Function for building the SVG line from the data\r\nvar line = d3.line()\r\n    .x(function(d) { return x_scales[thisYear](d.day); })\r\n    .y(function(d) { return y(d.val); });\r\n\r\n\r\n// Fires when the year selectbox changes value.\r\nfunction SelectYearChange() {\r\n    wy = d3.select(\"#selected-wy\").property(\"value\");\r\n    highlightYear(wy);\r\n}\r\n\r\n// Highlight the currently selected water year\r\nfunction highlightYear(wy) {\r\n    d3.selectAll(\"svg path.valueLine\").classed(\"highlight\", false);\r\n    d3.select(\"svg path.wy\" + wy).classed(\"highlight\", true);\r\n    d3.select(\"#selected-wy\").property(\"value\", wy);\r\n};\r\n\r\n// Helper function that takes a date object and calculates the water year\r\nfunction calcWaterYear(dt) {\r\n    var year = dt.getFullYear();\r\n    var month = dt.getMonth();\r\n    \r\n    var wy = year;\r\n    \r\n    // Months are zero-indexed in js, so this is greater than\r\n    //  or equal to October\r\n    if (month >= 9) {\r\n        wy = year + 1;\r\n    };\r\n    \r\n    return(wy);\r\n}\r\n\r\n// Load the daily data\r\nfunction plotSite(g_id) {\r\n    // If the data have not yet been loaded, pull them in via d3.csv, then\r\n    //   write them to dailyData and update everything.\r\n    \r\n    d3.selectAll(\"g.x-axis\").remove();\r\n    d3.selectAll(\"g.y-axis\").remove();\r\n    svg.selectAll(\"path.valueLine\").remove();\r\n    \r\n    clearStatsRow();\r\n    \r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    \r\n    if (data.length > 0) {\r\n        updatePlot(g_id);\r\n        updateStatsRow(data);\r\n    } else {\r\n        \r\n        var filepath = \"./data/g_id-\" + g_id + \".csv\"\r\n        //console.log(\"Loading \" + filepath);\r\n        \r\n        d3.csv(filepath, function(d) {\r\n          d.val =  d.val.length > 0 ? +d.val : \"-\";\r\n          d.day = parseDate(d.day);\r\n          d.wy = calcWaterYear(d.day);\r\n          \r\n          return d;\r\n        }, function(error, data) {\r\n            //console.log(\"Data file parsed.\");\r\n            dailyData = dailyData.concat(data);\r\n            //dailyData = data;\r\n            updatePlot(g_id);\r\n            updateStatsRow(data);\r\n        });\r\n    };\r\n};\r\n\r\n// Plot the daily data\r\nfunction updatePlot(g_id) {\r\n    \r\n    \r\n    // Only show data for the site we\"ve selected.\r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    var data_wy = _.groupBy(data, \"wy\");\r\n    \r\n    years = _.keys(data_wy);\r\n    var data_plot = [];\r\n    \r\n    // Update the water year select box; standard D3 update/enter/exit pattern\r\n    var options = d3.select(\"#selected-wy\")\r\n        .on('change', SelectYearChange)\r\n      .selectAll(\"option\")\r\n        .data(years, function(d) {return d;});\r\n      \r\n    options.enter().append(\"option\")\r\n        .attr(\"value\", function(d) { return d})\r\n        .text(function(d) {return d});\r\n        \r\n    options.exit().remove();\r\n    \r\n    \r\n    // Get some info about the site we\"re working with\r\n    var site = sitelist.filter(function(d) {return d.G_ID == g_id})[0];\r\n    var type = site.type;\r\n    \r\n    // Different data sets for each water year; also sort by day.\r\n    years.forEach(function(d, i) {\r\n        data_plot.push({\r\n            year: d,\r\n            points: _.sortBy(data_wy[d], [\"day\"])\r\n        });\r\n    });\r\n    \r\n    // Calculate a cumulative total if this is a rain site\r\n    if (type == \"Rain\" & !(site.cumCalculated == \"Y\")) {\r\n        data_plot.forEach(function(d) {\r\n            var cumulative = 0;\r\n            d.points.forEach(function(p) {\r\n                p.oldval = p.val;\r\n                p.val = cumulative + p.oldval;\r\n                cumulative = p.val;\r\n            });\r\n        });\r\n        site.cumCalculated = \"Y\";\r\n    };\r\n    \r\n    // Create separate x scales for each water year.  They need to have the\r\n    //   same range, but the domain will be different; that allows different\r\n    //   dates to map to the same x coordinate, which is what we want.\r\n    years.forEach(function(d) {\r\n        x_scales[\"scale\" + d] = d3.scaleTime()\r\n          .domain([new Date(d-1, 10, 1), new Date(d, 9, 30)])\r\n          .rangeRound([margin.left, width]);\r\n    });\r\n    \r\n    // Set up the y range; important that it be inside the function for resizing\r\n    //   Might be able to just include rangeRound in the resize function...\r\n    y.rangeRound([height, 0]);\r\n    y.domain(d3.extent(data, function(d) { return d.val; }));\r\n    \r\n    // Add the x-axis to the plot.  Use a class to identify it later.\r\n    g.append(\"g\")\r\n        .attr(\"class\", \"x-axis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x_scales[\"scale\" + _.max(years)])\r\n          .tickFormat(d3.timeFormat(\"%b\")))\r\n      .select(\".domain\")\r\n        .remove();\r\n    \r\n    \r\n    // Add the y-axis to the graph.  Includes some labeling text.\r\n    g.append(\"g\")\r\n        .call(d3.axisLeft(y))\r\n        .attr(\"class\", \"y-axis\")\r\n      .append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(type == \"Rain\" ? \"Rainfall (inches)\" : \"Water Level (feet)\");\r\n    \r\n    // Add multiple lines to the graph; one for each water year\r\n    g.selectAll(\".valueLine\")\r\n      .data(data_plot)\r\n      .enter()\r\n      .append(\"path\")\r\n        .attr(\"class\", function(d,i) {return \"valueLine wy\" + d.year})\r\n        .classed(\"currentwy\", function(d) {return (new Date()).getFullYear() == +d.year})\r\n        .attr(\"d\", function(d) {\r\n            thisYear = \"scale\" + d.year;\r\n            return line(d.points)})\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"fill\", \"none\")\r\n        .on(\"mouseover\", function(d) { highlightYear(d.year)});\r\n    \r\n    // Label years on mouseover\r\n    d3.select(\"g.x-axis\")\r\n      .append(\"text\")\r\n        .attr(\"class\", \"hoverText\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"y\", - 20)\r\n        .attr(\"x\", width - 20)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\");\r\n}\r\n\r\n// Keep the graph the same size as the map\r\nfunction setSVGSize() {\r\n    svg.attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n        .attr(\"height\", document.getElementById(\"mapid\").offsetHeight)\r\n    \r\n    width = +svg.attr(\"width\") - margin.left - margin.right;\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n}\r\n\r\nfunction resize() {\r\n    setSVGSize();\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    plotSite(g_id);\r\n}\r\n\r\nd3.select(window).on(\"resize\", resize);\r\n\r\nloadSites();\r\n\r\n\r\n"]}