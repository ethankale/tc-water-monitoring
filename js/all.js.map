{"version":3,"sources":["selectsite.js","map.js","plot.js"],"names":["selectChange","g_id","d3","select","property","selectSite","sitelist","onMarkerClick","e","target","data","site","filter","d","G_ID","sitemap","panTo","LAT","LON","highlightMarker","setLatLng","setIcon","highlightIcon","addTo","plotSite","updateStatsRow","maxThisYearVal","maxThisYearDay","prettyDate","timeFormat","yearOnlyFormat","maxMeasure","_","maxBy","mostRecent","currYearList","uniqBy","yearCount","length","maxYear","wy","currWY","calcWaterYear","Date","data_thisyear","maxThisYear","type","oldval","toFixed","val","day","recentContext1","recentContext2","max_currentyearContext1","max_overallContext1","max_overallDate","html","clearStatsRow","dailyData","iconType","icon","greenIcon","purpleIcon","orangeIcon","loadSites","csv","id","error","STATUS","on","selectAll","enter","append","attr","text","SITE_CODE","SITE_NAME","updateMapSites","forEach","isNaN","marker","L","displayDateFormat","map","setView","layer","StamenTileLayer","addLayer","CircleIcon","Icon","extend","options","shadowUrl","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","legend","control","position","onAdd","div","DomUtil","create","filenames","labels","i","innerHTML","SelectYearChange","highlightYear","classed","hoverYear","unHoverYear","dt","year","getFullYear","month","getMonth","remove","svg","updatePlot","filepath","parseDate","concat","data_wy","groupBy","years","keys","wy_options","clone","data_plot","push","exit","points","sortBy","cumCalculated","cumulative","p","x_scales","scaleTime","domain","rangeRound","margin","left","width","y","height","extent","g","call","axisBottom","max","tickFormat","axisLeft","thisYear","line","setSVGSize","document","getElementById","offsetWidth","offsetHeight","right","top","bottom","resize","timeParse","bisectDate","bisector","date","scaleLinear","bgcolor","maincolor","selectcolor","x","window"],"mappings":"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","file":"all.js","sourcesContent":["\r\n// Load this file first, before map.js and plot.js\r\n\r\n// On load, the progression is to load the globals (this script),\r\n//   then load the site list & map (map.js).  Then the first site\r\n//   is selected, and the plotSite() function creates a graph.\r\n\r\n\r\n/* Functions that control what happens when a site is selected.\r\n\r\n   Three possible ways to select a site:\r\n   - Click a marker\r\n   - Select an option from the selectbox\r\n   - Load the map (eventually use http POST to store selected site)\r\n   \r\n   Once a site is selected, do three things:\r\n   - Pan the map to the site location\r\n   - Update the selectbox option to the correct site\r\n   - Update the graph for the new data\r\n*/\r\n\r\n// Global variables.  I know, I\"m a terrible person.\r\nvar sitelist = {};\r\nvar dailyData = [];\r\n\r\n// The user selected a different site in the selectbox\r\nfunction selectChange() {\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    selectSite(sitelist, g_id);\r\n}\r\n\r\n// The user clicked on a marker in the Leaflet map\r\nfunction onMarkerClick(e) {\r\n    selectSite(sitelist, e.target.g_id);\r\n}\r\n\r\n// What happens when a user selects a site from the map or the list\r\nfunction selectSite(data, g_id) {\r\n    var site = data.filter(function(d) { return (d.G_ID === g_id); })[0];\r\n    d3.select(\"#selected-station\").property(\"value\", g_id);\r\n    \r\n    // Map manipulation\r\n    sitemap.panTo([site.LAT, site.LON]);\r\n    highlightMarker.setLatLng([site.LAT, site.LON]);\r\n    highlightMarker.setIcon(highlightIcon);\r\n    highlightMarker.addTo(sitemap);\r\n    \r\n    // Plot data\r\n    plotSite(g_id);\r\n    \r\n    // Update the quick-stats bar\r\n    //var currentData = _.filter(dailyData, {G_ID: g_id});\r\n    //updateStatsRow(currentData);\r\n}\r\n\r\n// Calculate and add statistics to the stats row, using\r\n//   data from the currently selected site\r\nfunction updateStatsRow(data) {\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", false)\r\n    \r\n    // Calculate statistics\r\n    var prettyDate = d3.timeFormat(\"%b %e, %Y\");\r\n    var yearOnlyFormat = d3.timeFormat(\"%Y\");\r\n    \r\n    var site = sitelist.filter(function (d) { return (d.G_ID === data[0].G_ID); })[0];\r\n    \r\n    var maxMeasure = _.maxBy(data, \"val\");\r\n    var mostRecent = _.maxBy(data, \"day\");\r\n    \r\n    var currYearList = _.uniqBy(data, \"wy\");\r\n    var yearCount = currYearList.length;\r\n    var maxYear = _.maxBy(currYearList, \"wy\").wy;\r\n    \r\n    var currWY = calcWaterYear(new Date());\r\n    var data_thisyear = _.filter(data, {\"wy\": currWY});\r\n    \r\n    // If there is no data for the current year, replacement values\r\n    var maxThisYearVal;\r\n    var maxThisYearDay;\r\n    \r\n    if (maxYear === currWY) {\r\n        var maxThisYear = {};\r\n        \r\n        if (site.type === \"Rain\") {\r\n            maxThisYear = _.maxBy(data_thisyear, \"oldval\");\r\n            maxThisYearVal = maxThisYear.oldval.toFixed(2);\r\n        } else {\r\n            var maxThisYear = _.maxBy(data_thisyear, \"val\");\r\n            maxThisYearVal = maxThisYear.val.toFixed(2);\r\n        }\r\n        \r\n        maxThisYearDay = prettyDate(maxThisYear.day);\r\n        \r\n    } else {\r\n        maxThisYearVal = \"No Data\";\r\n        maxThisYearDay = \"--\";\r\n        \r\n    }\r\n    \r\n    //console.log(maxThisYearVal);\r\n    //console.log(maxThisYearDay);\r\n    \r\n    // Tailor the context of the stats to the type of station we\"re looking at\r\n    var recentContext1 = \"Most Recent\";\r\n    var recentContext2 = \"\";\r\n    \r\n    var max_currentyearContext1 = \"Max This Year\";\r\n    \r\n    var max_overallContext1 = \"Highest Recorded\";\r\n    var max_overallDate = prettyDate(maxMeasure.day)\r\n    \r\n    if (site.type == \"Rain\") {\r\n        recentContext1 = \"Inches This Year\";\r\n        recentContext2 = \"As Of \";\r\n        \r\n        max_currentyearContext1 = \"Wettest Day This Year\";\r\n        \r\n        max_overallContext1 = \"Wettest Year\";\r\n        max_overallDate = yearOnlyFormat(maxMeasure.day);\r\n    }\r\n    \r\n    // Using the calculated stats & context, update the text\r\n    d3.select(\".quick-stats.recent\").html(\"<small>\" + recentContext1 + \"</small><br />\" +\r\n        mostRecent.val.toFixed(2) +\r\n        \" <br /><small>\" + recentContext2 + prettyDate(mostRecent.day) + \"</small>\");\r\n    \r\n    d3.select(\".quick-stats.count\").html(\"<small>Years Measured</small><br />\" +\r\n        yearCount);\r\n    \r\n    d3.select(\".quick-stats.max-currentyear\").html(\"<small>\" + max_currentyearContext1 + \"</small><br />\" +\r\n        maxThisYearVal +\r\n        \"<br /><small>\" + maxThisYearDay + \"</small>\");\r\n        \r\n    d3.select(\".quick-stats.max-overall\").html(\"<small>\" + max_overallContext1 + \"</small><br />\" +\r\n        maxMeasure.val.toFixed(2) +\r\n        \"<br /><small>\" + max_overallDate + \"</small>\");\r\n\r\n}\r\n\r\n// Remove data from the stats row, and display a \"Loading\" alert\r\nfunction clearStatsRow() {\r\n    d3.select(\".quick-stats.recent\").html(\"<small>--</small><br />Loading...<br /><small>--</small>\");\r\n    d3.select(\".quick-stats.count\").html(\"\");\r\n    d3.select(\".quick-stats.max-currentyear\").html(\"\");\r\n    d3.select(\".quick-stats.max-overall\").html(\"\");\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", true)\r\n}\r\n\r\n","\r\n// Build the map from the list of sites.\r\n// Include this after selectsite.js and before plot.js\r\n\r\nvar displayDateFormat = d3.timeFormat(\"%Y-%m-%d\");\r\n\r\nvar sitemap = L.map(\"mapid\").setView([47.04, -122.9], 10);\r\n\r\n// For now, we\"ll use OSM.  In the future it might behoove us to make our own\r\n//  tile layer, maybe using NAIP, hillshade, streets, NHD?\r\n\r\nvar layer = new L.StamenTileLayer(\"toner\");\r\nsitemap.addLayer(layer);\r\n\r\n\r\n//L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//    attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n//    maxZoom: 18,\r\n//}).addTo(sitemap);\r\n\r\n// Custom icons to differentiate between well, rain, and discharge monitoring.\r\nvar CircleIcon = L.Icon.extend({\r\n    options: {\r\n        shadowUrl: \"./img/marker/shadow_circle.png\",\r\n        iconSize:     [15, 15],\r\n        shadowSize:   [15, 15],\r\n        iconAnchor:   [7.5, 7.5],\r\n        shadowAnchor: [5, 5],\r\n        popupAnchor:  [15, 15]\r\n    }\r\n});\r\n\r\nvar greenIcon = new CircleIcon({iconUrl: \"./img/marker/green_circle.png\"}),\r\n    purpleIcon = new CircleIcon({iconUrl: \"./img/marker/purple_circle.png\"}),\r\n    orangeIcon = new CircleIcon({iconUrl: \"./img/marker/orange_circle.png\"});\r\n\r\n// The highlight icon will be different - slightly larger\r\nvar highlightIcon = L.icon({\r\n    iconUrl: \"./img/marker/highlight_circle.png\",\r\n    \r\n    iconSize:       [10, 10],\r\n    shadowSize:     [10, 10],\r\n    iconAnchor:     [5, 5],\r\n    shadowAnchor:   [10, 10],\r\n    popupAnchor:    [10, 10]\r\n})\r\n\r\nvar highlightMarker = L.marker({icon: highlightIcon});\r\n\r\nfunction iconType(type) {\r\n    var icon = {};\r\n    \r\n    if (type == \"Rain\") {\r\n        icon = greenIcon;\r\n    } if (type == \"Well\") {\r\n        icon = purpleIcon;\r\n    } if (type == \"Flow\") {\r\n        icon = orangeIcon;\r\n    };\r\n    \r\n    return icon;\r\n}\r\n\r\n// Make a legend\r\nvar legend = L.control({position: 'bottomright'});\r\n\r\nlegend.onAdd = function (sitemap) {\r\n    var div = L.DomUtil.create(\"div\", \"info legend\"),\r\n        filenames = [\"green_circle.png\", \"purple_circle.png\", \"orange_circle.png\"],\r\n        labels = [\"Rain\", \"Well\", \"Flow\"];\r\n\r\n    for (var i=0; i<filenames.length; i++) {\r\n        div.innerHTML += '<img src=\"./img/marker/' + filenames[i] + '\"></img>' +\r\n        '  ' + labels[i] + '<br />';\r\n    }\r\n    \r\n    return div;\r\n};\r\n\r\nlegend.addTo(sitemap)\r\n\r\n// Load the data from the CSV file into memory\r\nfunction loadSites() {\r\n    \r\n    d3.csv(\"./data/station_list.csv\", function(d) {\r\n      d.id = +d.G_ID;\r\n      d.LAT = +d.LAT;\r\n      d.LON = +d.LON;\r\n      \r\n      return d;\r\n    }, function(error, data) {\r\n      //if (error) throw error;\r\n      \r\n      data = data.filter(function(d) {return d.STATUS == \"Active\"})\r\n      \r\n      // Create the list of sites in the selectbox\r\n      var select = d3.select(\"#selected-station\")\r\n          .on(\"change\", selectChange)\r\n        .selectAll(\"option\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"option\")\r\n          .attr(\"value\", function(d) { return d.G_ID})\r\n          .text(function(d) {return d.SITE_CODE + \": \" + d.SITE_NAME + \" (\" + d.type + \")\"});\r\n      \r\n      sitelist = data;\r\n      \r\n      updateMapSites(data);\r\n      \r\n    });\r\n};\r\n\r\n// Add the monitoring sites to the leaflet map\r\nfunction updateMapSites(data) {\r\n    \r\n    data.forEach(function(d) {\r\n        if (!(isNaN(d.LAT) || isNaN(d.LON)) & d.STATUS == \"Active\"){\r\n            \r\n            var marker = L.marker([d.LAT, d.LON], {icon: iconType(d.type)});\r\n            marker.g_id = d.G_ID;\r\n            marker.on(\"click\", onMarkerClick);\r\n            \r\n            marker.addTo(sitemap);\r\n        };\r\n    });\r\n    \r\n    // Load up data when we launch the page\r\n    var g_id = sitelist[0].G_ID;\r\n    //console.log(g_id);\r\n    \r\n    plotSite(g_id);\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Functions for plotting data\r\n//   Include this AFTER load.js\r\n\r\n// D3 line chart constants\r\n//  See https://bl.ocks.org/mbostock/3883245\r\n\r\n// Multiple x-scales used to plot all water years on the same axis\r\n//   See http://stackoverflow.com/questions/42870187/d3-multi-series-chart-time-year-interval-x-axis-overlaying-multiple-years-of/42870609\r\n\r\nvar parseDate = d3.timeParse(\"%Y-%m-%d %H:%M:%S\");\r\n\r\nvar svg = d3.select(\"svg\")\r\n    .attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n    .attr(\"height\", document.getElementById(\"mapid\").offsetHeight),\r\n    margin = {top: 20, right: 10, bottom: 30, left: 50},\r\n    width = +svg.attr(\"width\") - margin.left - margin.right,\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\r\n    bisectDate = d3.bisector(function(d) { return d.date; }).left;\r\n\r\nvar g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n//var x = d3.scaleTime();\r\nvar x_scales = {};\r\nvar y = d3.scaleLinear();\r\n\r\nvar thisYear;\r\nvar years = [];\r\n\r\n// Color the most recent year differently from the other years.\r\n//   May replace this with a function that allows users to select\r\n//   a water year to highlight.\r\n\r\nbgcolor = \"#d9d9d9\";\r\nmaincolor = \"#525252\";\r\nselectcolor = \"red\";\r\n\r\n// Function for building the SVG line from the data\r\nvar line = d3.line()\r\n    .x(function(d) { return x_scales[thisYear](d.day); })\r\n    .y(function(d) { return y(d.val); });\r\n\r\n\r\n// Fires when the year selectbox changes value.\r\nfunction SelectYearChange() {\r\n    wy = d3.select(\"#selected-wy\").property(\"value\");\r\n    highlightYear(wy);\r\n}\r\n\r\n// Highlight the currently selected water year\r\nfunction highlightYear(wy) {\r\n    d3.selectAll(\"svg path.valueLine\").classed(\"highlight\", false);\r\n    if (wy != \"Clear\") {\r\n        d3.select(\"svg path.wy\" + wy).classed(\"highlight\", true);\r\n        d3.select(\"#selected-wy\").property(\"value\", wy);\r\n    }\r\n};\r\n\r\n// Show the exact date and value on mouseover\r\nfunction hoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(wy);\r\n    \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", true);\r\n}\r\n\r\n// Return to normal when leaving hover (mouseout)\r\nfunction unHoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(\"\");\r\n        \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", false);\r\n}\r\n\r\n// Helper function that takes a date object and calculates the water year\r\nfunction calcWaterYear(dt) {\r\n    var year = dt.getFullYear();\r\n    var month = dt.getMonth();\r\n    \r\n    var wy = year;\r\n    \r\n    // Months are zero-indexed in js, so this is greater than\r\n    //  or equal to October\r\n    if (month >= 9) {\r\n        wy = year + 1;\r\n    };\r\n    \r\n    return(wy);\r\n}\r\n\r\n// Load the daily data\r\nfunction plotSite(g_id) {\r\n    // If the data have not yet been loaded, pull them in via d3.csv, then\r\n    //   write them to dailyData and update everything.\r\n    \r\n    d3.selectAll(\"g.x-axis\").remove();\r\n    d3.selectAll(\"g.y-axis\").remove();\r\n    svg.selectAll(\"path.valueLine\").remove();\r\n    \r\n    clearStatsRow();\r\n    \r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    \r\n    if (data.length > 0) {\r\n        updatePlot(g_id);\r\n        updateStatsRow(data);\r\n    } else {\r\n        \r\n        var filepath = \"./data/g_id-\" + g_id + \".csv\"\r\n        //console.log(\"Loading \" + filepath);\r\n        \r\n        d3.csv(filepath, function(d) {\r\n          d.val =  d.val.length > 0 ? +d.val : \"-\";\r\n          d.day = parseDate(d.day);\r\n          d.wy = calcWaterYear(d.day);\r\n          \r\n          return d;\r\n        }, function(error, data) {\r\n            //console.log(\"Data file parsed.\");\r\n            dailyData = dailyData.concat(data);\r\n            //dailyData = data;\r\n            updatePlot(g_id);\r\n            updateStatsRow(data);\r\n        });\r\n    };\r\n};\r\n\r\n// Plot the daily data\r\nfunction updatePlot(g_id) {\r\n    \r\n    \r\n    // Only show data for the site we\"ve selected.\r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    var data_wy = _.groupBy(data, \"wy\");\r\n    \r\n    years = _.keys(data_wy);\r\n    var wy_options = _.clone(years);\r\n    var data_plot = [];\r\n    \r\n    // Update the water year select box; standard D3 update/enter/exit pattern\r\n    wy_options.push(\"Clear\");\r\n    var options = d3.select(\"#selected-wy\")\r\n        .on('change', SelectYearChange)\r\n      .selectAll(\"option\")\r\n        .data(wy_options, function(d) {return d;});\r\n      \r\n    options.enter().append(\"option\")\r\n        .attr(\"value\", function(d) { return d})\r\n        .text(function(d) {return d});\r\n        \r\n    options.exit().remove();\r\n    \r\n    \r\n    // Get some info about the site we\"re working with\r\n    var site = sitelist.filter(function(d) {return d.G_ID == g_id})[0];\r\n    var type = site.type;\r\n    \r\n    // Different data sets for each water year; also sort by day.\r\n    years.forEach(function(d, i) {\r\n        data_plot.push({\r\n            year: d,\r\n            points: _.sortBy(data_wy[d], [\"day\"])\r\n        });\r\n    });\r\n    \r\n    // Calculate a cumulative total if this is a rain site\r\n    if (type == \"Rain\" & !(site.cumCalculated == \"Y\")) {\r\n        data_plot.forEach(function(d) {\r\n            var cumulative = 0;\r\n            d.points.forEach(function(p) {\r\n                p.oldval = p.val;\r\n                p.val = cumulative + p.oldval;\r\n                cumulative = p.val;\r\n            });\r\n        });\r\n        site.cumCalculated = \"Y\";\r\n    };\r\n    \r\n    // Create separate x scales for each water year.  They need to have the\r\n    //   same range, but the domain will be different; that allows different\r\n    //   dates to map to the same x coordinate, which is what we want.\r\n    years.forEach(function(d) {\r\n        x_scales[\"scale\" + d] = d3.scaleTime()\r\n          .domain([new Date(d-1, 10, 1), new Date(d, 9, 30)])\r\n          .rangeRound([margin.left, width]);\r\n    });\r\n    \r\n    // Set up the y range; important that it be inside the function for resizing\r\n    //   Might be able to just include rangeRound in the resize function...\r\n    y.rangeRound([height, 0]);\r\n    y.domain(d3.extent(data, function(d) { return d.val; }));\r\n    \r\n    // Add the x-axis to the plot.  Use a class to identify it later.\r\n    g.append(\"g\")\r\n        .attr(\"class\", \"x-axis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x_scales[\"scale\" + _.max(years)])\r\n          .tickFormat(d3.timeFormat(\"%b\")))\r\n      .select(\".domain\")\r\n        .remove();\r\n    \r\n    \r\n    // Add the y-axis to the graph.  Includes some labeling text.\r\n    g.append(\"g\")\r\n        .call(d3.axisLeft(y))\r\n        .attr(\"class\", \"y-axis\")\r\n      .append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(type == \"Rain\" ? \"Rainfall (inches)\" : \"Water Level (feet)\");\r\n    \r\n    // Add multiple lines to the graph; one for each water year\r\n    g.selectAll(\".valueLine\")\r\n      .data(data_plot)\r\n      .enter()\r\n      .append(\"path\")\r\n        .attr(\"class\", function(d,i) {return \"valueLine wy\" + d.year})\r\n        .classed(\"currentwy\", function(d) {return (new Date()).getFullYear() == +d.year})\r\n        .attr(\"d\", function(d) {\r\n            thisYear = \"scale\" + d.year;\r\n            return line(d.points)})\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"fill\", \"none\")\r\n        .on(\"mouseover\", function(d) { hoverYear(d.year)})\r\n        .on(\"mouseout\", function(d) {unHoverYear(d.year)})\r\n        .on(\"click\", function(d) { highlightYear(d.year)});\r\n    \r\n    // Label years on mouseover\r\n    d3.select(\"g.x-axis\")\r\n      .append(\"text\")\r\n        .attr(\"class\", \"hoverText\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"y\", - 20)\r\n        .attr(\"x\", width - 20)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\");\r\n}\r\n\r\n// Keep the graph the same size as the map\r\nfunction setSVGSize() {\r\n    svg.attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n        .attr(\"height\", document.getElementById(\"mapid\").offsetHeight)\r\n    \r\n    width = +svg.attr(\"width\") - margin.left - margin.right;\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n}\r\n\r\nfunction resize() {\r\n    setSVGSize();\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    plotSite(g_id);\r\n}\r\n\r\nd3.select(window).on(\"resize\", resize);\r\n\r\nloadSites();\r\n\r\n\r\n"]}