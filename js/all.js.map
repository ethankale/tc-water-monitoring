{"version":3,"sources":["selectsite.js","map.js","plot.js"],"names":["selectChange","g_id","d3","select","property","selectSite","sitelist","onMarkerClick","e","target","data","called_by","url","window","location","href","split","length","history","pushState","site","filter","d","G_ID","URL","sitemap","panTo","LAT","LON","highlightMarker","setLatLng","setIcon","highlightIcon","addTo","plotSite","updateStatsRow","maxThisYearVal","maxThisYearDay","prettyDate","timeFormat","yearOnlyFormat","maxMeasure","_","maxBy","mostRecent","currYearList","uniqBy","yearCount","maxYear","wy","currWY","calcWaterYear","Date","data_thisyear","maxThisYear","type","oldval","toFixed","val","day","recentContext1","recentContext2","max_currentyearContext1","max_overallContext1","max_overallDate","html","clearStatsRow","dailyData","siteurls","onpopstate","state","console","log","replace","iconType","icon","greenIcon","purpleIcon","orangeIcon","blueIcon","loadSites","csv","id","Elevation","error","STATUS","on","selectAll","enter","append","attr","text","SITE_CODE","SITE_NAME","updateMapSites","forEach","isNaN","marker","L","getvars","displayDateFormat","map","setView","tileLayer","attribution","SiteIcon","Icon","extend","options","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","iconUrl","shadowURL","legend","control","position","onAdd","div","DomUtil","create","filenames","labels","i","innerHTML","qalevel","level","w","p","SelectYearChange","highlightYear","classed","hoverYear","unHoverYear","dt","year","getFullYear","month","getMonth","remove","svg","updatePlot","filepath","parseDate","provisional","warning","estimate","qa","concat","data_wy","groupBy","years","keys","wy_options","clone","data_plot","push","exit","points","sortBy","cumCalculated","cumulative","x_scales","scaleTime","domain","rangeRound","margin","left","width","y","height","y_extent","extent","Math","max","g","call","axisBottom","tickFormat","open","axisLeft","data_provisional","circleColor","thisYear","line","groundLine","groundText","firstYear","data_ground","empty","setSVGSize","document","getElementById","offsetWidth","offsetHeight","right","top","bottom","resize","shapePadding","timeParse","bisectDate","bisector","date","scaleLinear","bgcolor","maincolor","scaleOrdinal","range","legendColor","shape","orient","shapeRadius","scale","x"],"mappings":"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","file":"all.js","sourcesContent":["\r\n// Load this file first, before map.js and plot.js\r\n\r\n// On load, the progression is to load the globals (this script),\r\n//   then load the site list & map (map.js).  Then the first site\r\n//   is selected, and the plotSite() function creates a graph.\r\n\r\n\r\n/* Functions that control what happens when a site is selected.\r\n\r\n   Three possible ways to select a site:\r\n   - Click a marker\r\n   - Select an option from the selectbox\r\n   - Load the map (eventually use http POST to store selected site)\r\n   \r\n   Once a site is selected, do three things:\r\n   - Pan the map to the site location\r\n   - Update the selectbox option to the correct site\r\n   - Update the graph for the new data\r\n*/\r\n\r\n// Global variables.  I know, I'm a terrible person.\r\nvar sitelist = {};\r\nvar dailyData = [];\r\nvar siteurls = {};\r\n\r\n// The user selected a different site in the selectbox\r\nfunction selectChange() {\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    selectSite(sitelist, g_id);\r\n}\r\n\r\n// The user clicked on a marker in the Leaflet map\r\nfunction onMarkerClick(e) {\r\n    selectSite(sitelist, e.target.g_id);\r\n}\r\n\r\n// The user pressed the back or forward button\r\nwindow.onpopstate = function(e) {\r\n    if(e.state) {\r\n        \r\n        console.log(e.state);\r\n        \r\n        var url = window.location.href;\r\n        \r\n        if (url.split(\"#\").length > 1) {\r\n            g_id = url.split(\"#\")[1].split(\"=\")[1].replace(/\\D/g,'');\r\n            selectSite(sitelist, g_id, \"popstate\");\r\n        }\r\n    }\r\n}\r\n\r\n// What happens when a user selects a site from the map or the list\r\nfunction selectSite(data, g_id, called_by) {\r\n    \r\n    // Set the site GET variable, and update the browser history\r\n    if (typeof called_by === \"undefined\") {\r\n        url = window.location.href;\r\n        \r\n        if (url.split(\"#\").length > 1) {\r\n            url = url.split(\"#\")[0];\r\n        }\r\n        \r\n        window.history.pushState({\"site\": g_id}, \"TC Water Monitoring\", \"#site=\" + g_id);\r\n    };\r\n    \r\n    // Collect the site-specific data\r\n    var site = data.filter(function(d) { return (d.G_ID === g_id); })[0];\r\n    d3.select(\"#selected-station\").property(\"value\", g_id);\r\n    \r\n    // Update the download and more information links\r\n    d3.select(\"#downloadCSV\").property(\"href\", url.split(\"#\")[0].split(\"index\")[0] + \"/data/g_id-\" + g_id + \".csv\");\r\n    d3.select(\"#siteInfoLink\").property(\"href\", site.URL == \"NULL\" ? \"http://www.co.thurston.wa.us/monitoring/\" : site.URL);\r\n    \r\n    // Map manipulation\r\n    sitemap.panTo([site.LAT, site.LON]);\r\n    highlightMarker.setLatLng([site.LAT, site.LON]);\r\n    highlightMarker.setIcon(highlightIcon);\r\n    highlightMarker.addTo(sitemap);\r\n    \r\n    // Plot data\r\n    plotSite(g_id);\r\n}\r\n\r\n// Calculate and add statistics to the stats row, using\r\n//   data from the currently selected site\r\nfunction updateStatsRow(data) {\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", false)\r\n    \r\n    // Calculate statistics\r\n    var prettyDate = d3.timeFormat(\"%b %e, %Y\");\r\n    var yearOnlyFormat = d3.timeFormat(\"%Y\");\r\n    \r\n    var site = sitelist.filter(function (d) { return (d.G_ID === data[0].G_ID); })[0];\r\n    \r\n    var maxMeasure = _.maxBy(data, \"val\");\r\n    var mostRecent = _.maxBy(data, \"day\");\r\n    \r\n    var currYearList = _.uniqBy(data, \"wy\");\r\n    var yearCount = currYearList.length;\r\n    var maxYear = _.maxBy(currYearList, \"wy\").wy;\r\n    \r\n    var currWY = calcWaterYear(new Date());\r\n    var data_thisyear = _.filter(data, {\"wy\": currWY});\r\n    \r\n    // If there is no data for the current year, replacement values\r\n    var maxThisYearVal;\r\n    var maxThisYearDay;\r\n    \r\n    if (maxYear === currWY) {\r\n        var maxThisYear = {};\r\n        \r\n        if (site.type === \"Rain\") {\r\n            maxThisYear = _.maxBy(data_thisyear, \"oldval\");\r\n            maxThisYearVal = maxThisYear.oldval.toFixed(2);\r\n        } else {\r\n            var maxThisYear = _.maxBy(data_thisyear, \"val\");\r\n            maxThisYearVal = maxThisYear.val.toFixed(2);\r\n        }\r\n        \r\n        maxThisYearDay = prettyDate(maxThisYear.day);\r\n        \r\n    } else {\r\n        maxThisYearVal = \"No Data\";\r\n        maxThisYearDay = \"--\";\r\n        \r\n    }\r\n    \r\n    //console.log(maxThisYearVal);\r\n    //console.log(maxThisYearDay);\r\n    \r\n    // Tailor the context of the stats to the type of station we\"re looking at\r\n    var recentContext1 = \"Most Recent\";\r\n    var recentContext2 = \"\";\r\n    \r\n    var max_currentyearContext1 = \"Max This Year\";\r\n    \r\n    var max_overallContext1 = \"Highest Recorded\";\r\n    var max_overallDate = prettyDate(maxMeasure.day)\r\n    \r\n    if (site.type == \"Rain\") {\r\n        recentContext1 = \"Inches This Year\";\r\n        recentContext2 = \"As Of \";\r\n        \r\n        max_currentyearContext1 = \"Wettest Day This Year\";\r\n        \r\n        max_overallContext1 = \"Wettest Year\";\r\n        max_overallDate = yearOnlyFormat(maxMeasure.day);\r\n    }\r\n    \r\n    // Using the calculated stats & context, update the text\r\n    d3.select(\".quick-stats.recent\").html(\"<small>\" + recentContext1 + \"</small><br />\" +\r\n        mostRecent.val.toFixed(2) +\r\n        \" <br /><small>\" + recentContext2 + prettyDate(mostRecent.day) + \"</small>\");\r\n    \r\n    d3.select(\".quick-stats.count\").html(\"<small>Years Measured</small><br />\" +\r\n        yearCount);\r\n    \r\n    d3.select(\".quick-stats.max-currentyear\").html(\"<small>\" + max_currentyearContext1 + \"</small><br />\" +\r\n        maxThisYearVal +\r\n        \"<br /><small>\" + maxThisYearDay + \"</small>\");\r\n        \r\n    d3.select(\".quick-stats.max-overall\").html(\"<small>\" + max_overallContext1 + \"</small><br />\" +\r\n        maxMeasure.val.toFixed(2) +\r\n        \"<br /><small>\" + max_overallDate + \"</small>\");\r\n\r\n}\r\n\r\n// Remove data from the stats row, and display a \"Loading\" alert\r\nfunction clearStatsRow() {\r\n    d3.select(\".quick-stats.recent\").html(\"<small>--</small><br />Loading...<br /><small>--</small>\");\r\n    d3.select(\".quick-stats.count\").html(\"\");\r\n    d3.select(\".quick-stats.max-currentyear\").html(\"\");\r\n    d3.select(\".quick-stats.max-overall\").html(\"\");\r\n    \r\n    //d3.selectAll(\".quick-stats\").classed(\"bg-info\", true)\r\n}\r\n\r\n","\r\n// Build the map from the list of sites.\r\n// Include this after selectsite.js and before plot.js\r\n\r\nvar displayDateFormat = d3.timeFormat(\"%Y-%m-%d\");\r\n\r\nvar sitemap = L.map(\"mapid\").setView([47.04, -122.9], 10);\r\n\r\nL.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/' +\r\n                'World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {\r\n                attribution: 'Tiles &copy; <a href=\"http://services.arcgisonline.com/ArcGIS/' +\r\n                    'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\r\n            }).addTo(sitemap);\r\n\r\n// Stamen\r\n//var layer = new L.StamenTileLayer(\"toner\");\r\n//sitemap.addLayer(layer);\r\n\r\n// Osm\r\n//L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//    attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n//    maxZoom: 18,\r\n//}).addTo(sitemap);\r\n\r\n// Custom icons to differentiate between well, rain, and discharge monitoring.\r\nvar SiteIcon = L.Icon.extend({\r\n    options: {\r\n        iconSize:     [15, 15],\r\n        shadowSize:   [15, 15],\r\n        iconAnchor:   [7.5, 7.5],\r\n        shadowAnchor: [5, 5],\r\n        popupAnchor:  [15, 15]\r\n    }\r\n});\r\n\r\nvar greenIcon = new SiteIcon({iconUrl: \"./img/marker/green_circle.png\",\r\n                              shadowURL: \"./img/marker/shadow_circle.png\"}),\r\n    purpleIcon = new SiteIcon({iconUrl: \"./img/marker/purple_triangle.png\",\r\n                              shadowURL: \"./img/marker/shadow_triangle.png\"}),\r\n    orangeIcon = new SiteIcon({iconUrl: \"./img/marker/orange_square.png\",\r\n                              shadowURL: \"./img/marker/shadow_square.png\"});\r\n    blueIcon = new SiteIcon({iconUrl: \"./img/marker/blue_diamond.png\",\r\n                              shadowURL: \"./img/marker/shadow_diamond.png\"});\r\n\r\n// The highlight icon will be different - slightly smaller\r\nvar highlightIcon = L.icon({\r\n    iconUrl: \"./img/marker/highlight_circle.png\",\r\n    \r\n    iconSize:       [10, 10],\r\n    shadowSize:     [10, 10],\r\n    iconAnchor:     [5, 5],\r\n    shadowAnchor:   [10, 10],\r\n    popupAnchor:    [10, 10]\r\n})\r\n\r\nvar highlightMarker = L.marker({icon: highlightIcon});\r\n\r\nfunction iconType(type) {\r\n    var icon = {};\r\n    \r\n    if (type == \"Rain\") {\r\n        icon = greenIcon;\r\n    } if (type == \"Well\") {\r\n        icon = purpleIcon;\r\n    } if (type == \"Flow\") {\r\n        icon = orangeIcon;\r\n    } if (type == \"Lake\") {\r\n        icon = blueIcon;\r\n    };\r\n    \r\n    return icon;\r\n}\r\n\r\n// Make a legend\r\nvar legend = L.control({position: 'bottomright'});\r\n\r\nlegend.onAdd = function (sitemap) {\r\n    var div = L.DomUtil.create(\"div\", \"info legend\"),\r\n        filenames = [\"green_circle.png\", \"purple_triangle.png\", \"orange_square.png\", \"blue_diamond.png\"],\r\n        labels = [\"Rain\", \"Well\", \"Stream\", \"Lake\"];\r\n\r\n    for (var i=0; i<filenames.length; i++) {\r\n        div.innerHTML += '<img src=\"./img/marker/' + filenames[i] + '\"></img>' +\r\n        '  ' + labels[i] + '<br />';\r\n    }\r\n    \r\n    return div;\r\n};\r\n\r\nlegend.addTo(sitemap)\r\n\r\n// Load the data from the CSV file into memory\r\nfunction loadSites() {\r\n    \r\n    d3.csv(\"./data/station_list.csv\", function(d) {\r\n      d.id = +d.G_ID;\r\n      d.LAT = +d.LAT;\r\n      d.LON = +d.LON;\r\n      d.Elevation = +d.Elevation;\r\n      \r\n      return d;\r\n    }, function(error, data) {\r\n      //if (error) throw error;\r\n      \r\n      data = data.filter(function(d) {return d.STATUS == \"Active\"})\r\n      \r\n      // Create the list of sites in the selectbox\r\n      var select = d3.select(\"#selected-station\")\r\n          .on(\"change\", selectChange)\r\n        .selectAll(\"option\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"option\")\r\n          .attr(\"value\", function(d) { return d.G_ID})\r\n          .text(function(d) {return d.SITE_CODE + \": \" + d.SITE_NAME + \" (\" + (d.type == \"Flow\" ? \"Stream\" : d.type) + \")\"});\r\n      \r\n      sitelist = data;\r\n      \r\n      updateMapSites(sitelist);\r\n    });\r\n};\r\n\r\n// Add the monitoring sites to the leaflet map\r\nfunction updateMapSites(data) {\r\n    \r\n    data.forEach(function(d) {\r\n        if (!(isNaN(d.LAT) || isNaN(d.LON)) & d.STATUS == \"Active\"){\r\n            \r\n            var marker = L.marker([d.LAT, d.LON], {icon: iconType(d.type)});\r\n            marker.g_id = d.G_ID;\r\n            marker.on(\"click\", onMarkerClick);\r\n            \r\n            marker.addTo(sitemap);\r\n        };\r\n    });\r\n    \r\n    // Load up data when we launch the page\r\n    var getvars = window.location.href.split(\"#\")[1];\r\n    var g_id = typeof getvars === \"undefined\" ? sitelist[0].G_ID : getvars.split(\"=\")[1].replace(/\\D/g,'');\r\n    //var g_id = sitelist[0].G_ID;\r\n    //console.log(g_id);\r\n    \r\n    selectSite(sitelist, g_id);\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Functions for plotting data\r\n//   Include this AFTER load.js\r\n\r\n// D3 line chart constants\r\n//  See https://bl.ocks.org/mbostock/3883245\r\n\r\n// Multiple x-scales used to plot all water years on the same axis\r\n//   See http://stackoverflow.com/questions/42870187/d3-multi-series-chart-time-year-interval-x-axis-overlaying-multiple-years-of/42870609\r\n\r\nvar parseDate = d3.timeParse(\"%Y-%m-%d %H:%M:%S\");\r\n\r\nvar svg = d3.select(\"svg\")\r\n    .attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n    .attr(\"height\", document.getElementById(\"mapid\").offsetHeight),\r\n    margin = {top: 20, right: 10, bottom: 70, left: 30},\r\n    width = +svg.attr(\"width\") - margin.left - margin.right,\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\r\n    bisectDate = d3.bisector(function(d) { return d.date; }).left;\r\n\r\n// Add the SVG container for the plot\r\nvar g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n//var x = d3.scaleTime();\r\nvar x_scales = {};\r\nvar y = d3.scaleLinear();\r\n\r\nvar thisYear;\r\nvar years = [];\r\n\r\n// Color the most recent year differently from the other years.\r\n//   May replace this with a function that allows users to select\r\n//   a water year to highlight.\r\n\r\nbgcolor = \"#d9d9d9\";\r\nmaincolor = \"#525252\";\r\n\r\n// Color the dots that indicate provisional, warning, and estimated data\r\n//   differently from each other; warning > estimated > provisional\r\n\r\nfunction qalevel(d) {\r\n    var level = \"\";\r\n    if (d.w == 1) {\r\n      level = \"Warning\";\r\n    } else if (d.e == 1) {\r\n      level = \"Estimate\";\r\n    } else if (d.p == 1) {\r\n      level = \"Provisional\";\r\n    }\r\n    return level;\r\n}\r\n\r\nvar circleColor = d3.scaleOrdinal()\r\n    .domain([\"Normal\",\"Warning\", \"Estimate\", \"Provisional\"])\r\n    .range([\"#cccccc\", \"#8e0152\", \"#de77ae\", \"#4d9221\"])\r\n\r\n// Add the legend\r\nsvg.append(\"g\")\r\n  .attr(\"class\", \"legendOrdinal\")\r\n  .attr(\"transform\", \"translate(\" + margin.left + \", \" + (height + margin.bottom - 5) + \")\");\r\n\r\nvar legend = d3.legendColor()\r\n    .shape(\"circle\")\r\n    .orient(\"horizontal\")\r\n    .shapeRadius(3)\r\n    .shapePadding((width + margin.left + margin.right)/4)\r\n    .scale(circleColor)\r\n\r\nsvg.select(\".legendOrdinal\")\r\n    .call(legend);\r\n\r\n// Function for building the SVG line from the data\r\nvar line = d3.line()\r\n    .x(function(d) { return x_scales[thisYear](d.day); })\r\n    .y(function(d) { return y(d.val); });\r\n\r\n// Fires when the year selectbox changes value.\r\nfunction SelectYearChange() {\r\n    wy = d3.select(\"#selected-wy\").property(\"value\");\r\n    highlightYear(wy);\r\n}\r\n\r\n// Highlight the currently selected water year\r\nfunction highlightYear(wy) {\r\n    d3.selectAll(\"svg path.valueLine\").classed(\"highlight\", false);\r\n    d3.selectAll(\"svg circle.valueCircle\").classed(\"highlight\", false);\r\n    if (wy != \"Clear\") {\r\n        d3.select(\"svg path.wy\" + wy).classed(\"highlight\", true);\r\n        d3.selectAll(\"svg circle.wy\" + wy).classed(\"highlight\", true);\r\n        d3.select(\"#selected-wy\").property(\"value\", wy);\r\n    }\r\n};\r\n\r\n// Show the exact date and value on mouseover\r\nfunction hoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(wy);\r\n    \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", true);\r\n    d3.selectAll(\"svg circle.wy\" + wy).classed(\"hover\", true);\r\n}\r\n\r\n// Return to normal when leaving hover (mouseout)\r\nfunction unHoverYear(wy) {\r\n    d3.select(\".x-axis .hoverText\")\r\n        .text(\"\");\r\n        \r\n    d3.select(\"svg path.wy\" + wy).classed(\"hover\", false);\r\n    d3.selectAll(\"svg circle.wy\" + wy).classed(\"hover\", false);\r\n}\r\n\r\n// Helper function that takes a date object and calculates the water year\r\nfunction calcWaterYear(dt) {\r\n    var year = dt.getFullYear();\r\n    var month = dt.getMonth();\r\n    \r\n    var wy = year;\r\n    \r\n    // Months are zero-indexed in js, so this is greater than\r\n    //  or equal to October\r\n    if (month >= 9) {\r\n        wy = year + 1;\r\n    };\r\n    \r\n    return(wy);\r\n}\r\n\r\n// Load the daily data\r\nfunction plotSite(g_id) {\r\n    // If the data have not yet been loaded, pull them in via d3.csv, then\r\n    //   write them to dailyData and update everything.\r\n    \r\n    d3.selectAll(\"g.x-axis\").remove();\r\n    d3.selectAll(\"g.y-axis\").remove();\r\n    svg.selectAll(\"path.valueLine\").remove();\r\n    svg.selectAll(\"circle.valueCircle\").remove();\r\n    \r\n    clearStatsRow();\r\n    \r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    \r\n    if (data.length > 0) {\r\n        updatePlot(g_id);\r\n        updateStatsRow(data);\r\n    } else {\r\n        \r\n        var filepath = \"./data/g_id-\" + g_id + \".csv\"\r\n        //console.log(\"Loading \" + filepath);\r\n        \r\n        d3.csv(filepath, function(d) {\r\n          d.val =  d.val.length > 0 ? +d.val : \"-\";\r\n          d.day = parseDate(d.day);\r\n          d.wy = calcWaterYear(d.day);\r\n          d.p = d.provisional == 0 || d.provisional == \"False\" ? 0 : 1;\r\n          d.w = d.warning == 0 || d.warning == \"False\" ? 0 : 1;\r\n          d.e = d.estimate == 0 || d.estimate == \"False\" ? 0 : 1;\r\n          d.qa = qalevel(d);\r\n          \r\n          return d;\r\n        }, function(error, data) {\r\n            //console.log(\"Data file parsed.\");\r\n            dailyData = dailyData.concat(data);\r\n            //dailyData = data;\r\n            updatePlot(g_id);\r\n            updateStatsRow(data);\r\n        });\r\n    };\r\n};\r\n\r\n// Plot the daily data\r\nfunction updatePlot(g_id) {\r\n    \r\n    // Only show data for the site we've selected.\r\n    var data = _.filter(dailyData, {\"G_ID\" : g_id});\r\n    var data_wy = _.groupBy(data, \"wy\");\r\n    \r\n    years = _.keys(data_wy);\r\n    var wy_options = _.clone(years);\r\n    var data_plot = [];\r\n    \r\n    // Update the water year select box; standard D3 update/enter/exit pattern\r\n    wy_options.push(\"Clear\");\r\n    var options = d3.select(\"#selected-wy\")\r\n        .on('change', SelectYearChange)\r\n      .selectAll(\"option\")\r\n        .data(wy_options, function(d) {return d;});\r\n      \r\n    options.enter().append(\"option\")\r\n        .attr(\"value\", function(d) { return d})\r\n        .text(function(d) {return d});\r\n        \r\n    options.exit().remove();\r\n    \r\n    // Set the water year selection back to \"Clear\" every time.\r\n    d3.select(\"#selected-wy\").property(\"value\", \"Clear\");\r\n    \r\n    // Get some info about the site we\"re working with\r\n    var site = sitelist.filter(function(d) {return d.G_ID == g_id})[0];\r\n    var type = site.type;\r\n    \r\n    // Different data sets for each water year; also sort by day.\r\n    years.forEach(function(d, i) {\r\n        data_plot.push({\r\n            year: d,\r\n            points: _.sortBy(data_wy[d], [\"day\"])\r\n        });\r\n    });\r\n    \r\n    // Calculate a cumulative total if this is a rain site\r\n    if (type == \"Rain\" & !(site.cumCalculated == \"Y\")) {\r\n        data_plot.forEach(function(d) {\r\n            var cumulative = 0;\r\n            d.points.forEach(function(p) {\r\n                p.oldval = p.val;\r\n                p.val = cumulative + p.oldval;\r\n                cumulative = p.val;\r\n            });\r\n        });\r\n        site.cumCalculated = \"Y\";\r\n    };\r\n    \r\n    // Create separate x scales for each water year.  They need to have the\r\n    //   same range, but the domain will be different; that allows different\r\n    //   dates to map to the same x coordinate, which is what we want.\r\n    years.forEach(function(d) {\r\n        x_scales[\"scale\" + d] = d3.scaleTime()\r\n          .domain([new Date(d-1, 9, 1), new Date(d, 8, 30)])\r\n          .rangeRound([margin.left, width]);\r\n    });\r\n    \r\n    // Set up the y range; important that it be inside the function for resizing\r\n    y.rangeRound([height, 0]);\r\n    y_extent = d3.extent(data, function(d) { return d.val; });\r\n    if (site.type == \"Well\") {\r\n        y_extent = [y_extent[0], Math.max(y_extent[1], site.Elevation)]\r\n    }\r\n    y.domain(y_extent);\r\n    \r\n    // Add the x-axis to the plot.  Use a class to identify it later.\r\n    g.append(\"g\")\r\n        .attr(\"class\", \"x-axis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x_scales[\"scale\" + _.max(years)])\r\n          .tickFormat(d3.timeFormat(\"%b\")))\r\n      .select(\".domain\")\r\n        .remove();\r\n    \r\n    g.select(\".x-axis\")\r\n      .append(\"text\")\r\n        .attr(\"class\", \"x-axis-label\")\r\n        .attr(\"font-size\", \"1.2em\")\r\n        .attr(\"y\", 40)\r\n        .attr(\"x\", width / 2)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(\"Time of Year\")\r\n        .on(\"click\", function() {window.open(\"https://en.wikipedia.org/wiki/Water_year\"); });\r\n    \r\n    // Add the y-axis to the graph.  Includes some labeling text.\r\n    g.append(\"g\")\r\n        .call(d3.axisLeft(y))\r\n        .attr(\"class\", \"y-axis\")\r\n      .append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"font-size\", \"1.2em\")\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \"1em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(type == \"Rain\" ? \"Rainfall (inches)\" : \"Water Level (feet)\");\r\n    \r\n    // Add circles for the provisional values\r\n    var data_provisional = _.filter(data, function(d) {\r\n        return d.p + d.e + d.w > 0;\r\n    });\r\n    \r\n    //console.log(data_provisional);\r\n    \r\n    g.selectAll(\".valueCircle\")\r\n        .data(data_provisional)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", function(d,i) {return \"valueCircle wy\" + d.wy})\r\n        .attr(\"cx\", function(d) { return x_scales[\"scale\" + d.wy](d.day)})\r\n        .attr(\"cy\", function(d) { return y(d.val)})\r\n        .attr(\"r\", 3)\r\n        .attr(\"stroke\", function(d) { return circleColor(d.qa)})\r\n        .attr(\"fill\", function(d) { return circleColor(d.qa)})\r\n        .on(\"mouseover\", function(d) { hoverYear(d.wy)})\r\n        .on(\"mouseout\", function(d) {unHoverYear(d.wy)})\r\n        .on(\"click\", function(d) { highlightYear(d.wy)})\r\n      .exit()\r\n        .remove();\r\n    \r\n    \r\n    // Add multiple lines to the graph; one for each water year\r\n    g.selectAll(\".valueLine\")\r\n      .data(data_plot)\r\n      .enter()\r\n      .append(\"path\")\r\n        .attr(\"class\", function(d,i) {return \"valueLine wy\" + d.year})\r\n        .classed(\"currentwy\", function(d) {return (new Date()).getFullYear() == +d.year})\r\n        .attr(\"d\", function(d) {\r\n            thisYear = \"scale\" + d.year;\r\n            return line(d.points)})\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"fill\", \"none\")\r\n        .on(\"mouseover\", function(d) { hoverYear(d.year)})\r\n        .on(\"mouseout\", function(d) {unHoverYear(d.year)})\r\n        .on(\"click\", function(d) { highlightYear(d.year)});\r\n    \r\n    // Add the ground elevation to the plot (or remove it, if not a well)\r\n    var groundLine = g.select(\"#groundLine\")\r\n    var groundText = g.select(\"#groundText\")\r\n    \r\n    if(site.type == \"Well\") {\r\n        var firstYear = years[0];\r\n        //var dates = _.map(data, 'day')\r\n        var data_ground = [{day: new Date(firstYear-1, 9, 1), val: site.Elevation},\r\n                           {day: new Date(firstYear, 8, 30), val: site.Elevation}]\r\n        \r\n        console.log(data_ground);\r\n        console.log(line(data_ground));\r\n        \r\n        if(groundLine.empty()) {\r\n            groundLine = g.append('path')\r\n                .attr(\"id\", \"groundLine\")\r\n                .attr(\"class\", \"groundLine\")\r\n                .attr(\"d\", function(){thisYear = \"scale\" + firstYear; return line(data_ground)})\r\n                .attr(\"stroke-linejoin\", \"round\")\r\n                .attr(\"stroke-linecap\", \"round\")\r\n                .attr(\"stroke-width\", 1.5)\r\n                .attr(\"fill\", \"none\");\r\n            \r\n            groundText = g.append('text')\r\n                .attr(\"id\", \"groundText\")\r\n                .text(\"Ground Elevation\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"y\", -10)\r\n                .attr(\"x\", (width)/2);\r\n        }\r\n    } else {\r\n        groundLine.remove();\r\n        groundText.remove();\r\n    }\r\n    \r\n    // Label years on mouseover\r\n    d3.select(\"g.x-axis\")\r\n      .append(\"text\")\r\n        .attr(\"class\", \"hoverText\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(\"y\", - 20)\r\n        .attr(\"x\", width - 20)\r\n        .attr(\"dy\", \"0.8em\")\r\n        .attr(\"text-anchor\", \"end\");\r\n}\r\n\r\n// Keep the graph the same size as the map\r\nfunction setSVGSize() {\r\n    svg.attr(\"width\", document.getElementById(\"mapid\").offsetWidth)\r\n        .attr(\"height\", document.getElementById(\"mapid\").offsetHeight)\r\n    \r\n    width = +svg.attr(\"width\") - margin.left - margin.right;\r\n    height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n}\r\n\r\nfunction resize() {\r\n    setSVGSize();\r\n    // Reset legend to match width\r\n    legend.shapePadding((width + margin.left + margin.right)/4);\r\n    svg.select(\".legendOrdinal\").call(legend);\r\n    g_id = d3.select(\"#selected-station\").property(\"value\");\r\n    plotSite(g_id);\r\n}\r\n\r\nd3.select(window).on(\"resize\", resize);\r\n\r\nloadSites();\r\n\r\n\r\n"]}